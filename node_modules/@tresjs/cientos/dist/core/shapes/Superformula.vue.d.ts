import { TresColor } from '@tresjs/core';
export type Float3 = [number, number, number];
export interface SuperFormulaProps {
    /**
     * Number of horizontal mesh segments
     */
    widthSegments?: number;
    /**
     * Number of vertical mesh segments
     */
    heightSegments?: number;
    /**
     * The 3D Superformula is the spherical product of 2 2D superformula curves: here called curves "A" and "B".
     * Number of radial arms/ripples of A, corresponding to "m" [in this article.](https://en.wikipedia.org/wiki/Superformula)
     */
    numArmsA?: number;
    /**
     * A's 3 exponents
     */
    expA?: Float3;
    /**
     * For B, number of radial arms/ripples
     */
    numArmsB?: number;
    /**
     * B's 3 exponents
     */
    expB?: Float3;
    /**
     * If no material is provided, a color for the default material
     */
    color?: TresColor;
}
declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<SuperFormulaProps, {
    instance: import('vue').ShallowRef<any>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<SuperFormulaProps> & Readonly<{}>, {
    color: TresColor;
    widthSegments: number;
    heightSegments: number;
    numArmsA: number;
    expA: Float3;
    numArmsB: number;
    expB: Float3;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
