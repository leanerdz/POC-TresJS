import { TresColor } from '@tresjs/core';
import { TubeGeometry } from 'three';
export interface TubeProps {
    /**
     * The curve, segments, radius, radialSegments, closed.
     * @default [new QuadraticBezierCurve3(new Vector3(-1, 0, 0), new Vector3(0, 1, 0), new Vector3(1, 0, 0)), 20, 0.2, 8, false]
     * @type {TubeGeometryParams}
     * @memberof TubeProps
     * @see https://threejs.org/docs/#api/en/geometries/TubeGeometry
     */
    args?: ConstructorParameters<typeof TubeGeometry>;
    /**
     * The color of the tube.
     * @default 0xffffff
     * @type {TresColor}
     * @memberof TubeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial
     */
    color?: TresColor;
}
declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<TubeProps, {
    instance: import('vue').ShallowRef<any>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<TubeProps> & Readonly<{}>, {
    color: TresColor;
    args: ConstructorParameters<typeof TubeGeometry>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
