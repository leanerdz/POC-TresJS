import { TresObject3D } from '@tresjs/core';
import { Mutable } from '@vueuse/core';
export interface HTMLProps {
    geometry?: any;
    material?: any;
    as?: string;
    transform?: boolean;
    portal?: Mutable<HTMLElement>;
    wrapperClass?: string;
    eps?: number;
    distanceFactor?: number;
    fullscreen?: boolean;
    center?: boolean;
    pointerEvents?: PointerEventsProperties;
    sprite?: boolean;
    zIndexRange?: Array<number>;
    occlude?: TresObject3D | null | (TresObject3D | null)[] | boolean | 'raycast' | 'blending';
}
type PointerEventsProperties = 'auto' | 'none' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'inherit';
declare function __VLS_template(): Readonly<Record<string, any>> & Record<string, any>;
declare const __VLS_component: import('vue').DefineComponent<HTMLProps, {
    instance: import('vue').Ref<TresObject3D | undefined, TresObject3D | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onOcclude: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<HTMLProps> & Readonly<{
    onOnOcclude?: ((...args: any[]) => any) | undefined;
}>, {
    sprite: boolean;
    geometry: any;
    transform: boolean;
    as: string;
    eps: number;
    pointerEvents: PointerEventsProperties;
    zIndexRange: Array<number>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
